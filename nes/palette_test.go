package nes

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_PaletteRAM_Read(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name string
		ram  paletteRAM
		addr paletteAddr
		want byte
	}{
		{
			"1",
			paletteRAM{
				0x1, 0x2, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
			},
			newPaletteAddr(false, 0x0, 0x1),
			0x2,
		},
		{
			"2",
			paletteRAM{
				0x1, 0x2, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x3, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
			},
			newPaletteAddr(true, 0x0, 0x1),
			0x3,
		},
		{
			"3",
			paletteRAM{
				0x1, 0x2, 0x0, 0x0,
				0x4, 0x0, 0x0, 0x0,
				0x5, 0x0, 0x0, 0x0,
				0x6, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
			},
			newPaletteAddr(true, 0x0, 0x0),
			0x1,
		},
		{
			"4",
			paletteRAM{
				0x1, 0x2, 0x0, 0x0,
				0x4, 0x0, 0x0, 0x0,
				0x5, 0x0, 0x0, 0x0,
				0x6, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
			},
			newPaletteAddr(true, 0x1, 0x0),
			0x4,
		},
		{
			"5",
			paletteRAM{
				0x1, 0x2, 0x0, 0x0,
				0x4, 0x0, 0x0, 0x0,
				0x5, 0x0, 0x0, 0x0,
				0x6, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
			},
			newPaletteAddr(true, 0x2, 0x0),
			0x5,
		},
		{
			"6",
			paletteRAM{
				0x1, 0x2, 0x0, 0x0,
				0x4, 0x0, 0x0, 0x0,
				0x5, 0x0, 0x0, 0x0,
				0x6, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
			},
			newPaletteAddr(true, 0x3, 0x0),
			0x6,
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := tt.ram.Read(tt.addr)
			assert.Equal(t, tt.want, got)
		})
	}
}

func Test_PaletteRAM_Write(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name string
		ram  paletteRAM
		addr paletteAddr
		val  byte
		want paletteRAM
	}{
		{
			"1",
			paletteRAM{},
			newPaletteAddr(false, 0x0, 0x1),
			0x1,
			paletteRAM{
				0x0, 0x1, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
			},
		},
		{
			"2",
			paletteRAM{},
			newPaletteAddr(true, 0x0, 0x1),
			0x3,
			paletteRAM{
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x3, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
			},
		},
		{
			"3",
			paletteRAM{},
			newPaletteAddr(true, 0x0, 0x0),
			0x1,
			paletteRAM{
				0x1, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
			},
		},
		{
			"4",
			paletteRAM{},
			newPaletteAddr(true, 0x1, 0x0),
			0x4,
			paletteRAM{
				0x0, 0x0, 0x0, 0x0,
				0x4, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
			},
		},
		{
			"5",
			paletteRAM{},
			newPaletteAddr(true, 0x2, 0x0),
			0x5,
			paletteRAM{
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x5, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
			},
		},
		{
			"6",
			paletteRAM{},
			newPaletteAddr(true, 0x3, 0x0),
			0x6,
			paletteRAM{
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x6, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
			},
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			tt.ram.Write(tt.addr, tt.val)
			assert.Equal(t, tt.want, tt.ram)
		})
	}
}

func Test_PaletteAddr_GetAddr(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name string
		addr paletteAddr
		want byte
	}{
		{
			"1",
			newPaletteAddr(false, 0x3, 0x3),
			0x0F,
		},
		{
			"2",
			newPaletteAddr(true, 0x1, 0x1),
			0x15,
		},
	}

	for _, tt := range tests {
		tt := tt
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := byte(tt.addr)
			assert.Equal(t, tt.want, got)
		})
	}

}
